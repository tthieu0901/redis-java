package server.nonblocking;

import stream.BufferReader;
import stream.BufferWriter;
import stream.Reader;
import stream.Writer;

import java.nio.channels.SocketChannel;

class Conn {
    private static final int BUFFER_SIZE = 64 * 1024; // 64KB initial buffer size

    private final SocketChannel channel;
    private boolean wantRead = false;
    private boolean wantWrite = false;
    private boolean wantClose = false;
    private final Writer writer;
    private final Reader reader;

    Conn(SocketChannel channel) {
        this.channel = channel;
        this.wantRead = true;
        Buffer incoming = new Buffer(BUFFER_SIZE);  // data to be parsed by application
        Buffer outgoing = new Buffer(BUFFER_SIZE); // responses generated by application
        this.writer = new BufferWriter(channel, outgoing);
        this.reader = new BufferReader(channel, incoming);
    }

    void wantRead() {
        this.wantRead = true;
        this.wantWrite = false;
    }

    void wantWrite() {
        this.wantWrite = true;
        this.wantRead = false;
    }

    void wantClose() {
        this.wantClose = true;
    }


    SocketChannel getChannel() {
        return channel;
    }

    boolean isWantRead() {
        return wantRead;
    }

    boolean isWantWrite() {
        return wantWrite;
    }

    boolean isWantClose() {
        return wantClose;
    }

    Writer getWriter() {
        return writer;
    }

    Reader getReader() {
        return reader;
    }
}
